{"meta":{"title":"云之彼端","subtitle":"twh blog","description":"服务器太贵了...","author":"weihai","url":"http://blog.twhlyl.top"},"pages":[],"posts":[{"title":"mac下使用plist实现定时任务","slug":"mac下使用plist实现定时任务","date":"2019-02-02T02:43:00.000Z","updated":"2019-02-02T02:45:37.353Z","comments":true,"path":"2019/02/02/mac下使用plist实现定时任务/","link":"","permalink":"http://blog.twhlyl.top/2019/02/02/mac下使用plist实现定时任务/","excerpt":"","text":"记录下主要步骤： 新建一个任务脚本文件，如 /Users/username/Downloads/autoRun.sh (里面的具体内容就是到了时间要跑的任务内容) chmod 755 autoRun.sh （确保有可执行的权限） 然后进入到~/Library/LaunchAgents 下建一个plist文件，如com.twh.test.autorun.plist plist文件内容可以参考下面的： Label 可以随便起，但是要唯一 1234ProgramArguments 存放需要定时跑的脚本路径+名字StartCalendarInterval 可以定时到 “时 分 秒”也可以使用StartInterval 表示间隔多少秒,如StartInterval 60 6.1234开始执行定时任务 launchctl load com.twh.test.autorun.plist 取消定时任务 launchctl unload com.twh.test.autorun.plist 立即执行任务一次 launchctl start com.twh.test.autorun.plist 停止执行任务 launchctl stop com.twh.test.autorun.plist http://my.oschina.net/jackin/blog/263024 http://www.2cto.com/os/201305/215350.html","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://blog.twhlyl.top/tags/mac/"}]},{"title":"opentWrt 流量控制tc","slug":"opentWrt-流量控制tc","date":"2019-02-02T01:48:00.000Z","updated":"2019-02-02T02:03:57.368Z","comments":true,"path":"2019/02/02/opentWrt-流量控制tc/","link":"","permalink":"http://blog.twhlyl.top/2019/02/02/opentWrt-流量控制tc/","excerpt":"","text":"在openwrt路由上使用tc命令控制网络的带宽、延时、丢包率，来模拟一些弱网络的环境1.核心命令参考：Network Traffic Control (QOS) 用opkg安装12opkg updateopkg install tc iptables-mod-ipopt 用法12tc qdisc del dev eth0 roottc qdisc add dev eth0 root netem rate 1mbit delay 200ms loss 10%​ 2.界面光有了命令，每次都要ssh上去，还是很麻烦，所以需要一个快捷执行命令的方法 这里非常感谢Shuhao Wu分享的Traffic Cop工具，可以方便的在网页上设置网络环境 安装方法在他的文章末尾有，我主要说下我安装、使用过程中碰到的问题： Package kmod-sched wants to install file /lib/modules/3.10.49/sch_netem.ko But that file is already provided by package kmod-netem Collected errors 解决方法是 命令后加 –force-overwrite 安装成功后，启动trafficcop，网页访问后，点了按钮，不能实现限速。原因应该是tc命令中的interface 或参数设置不正确，具体还没仔细看，临时的解决方法是，把 tc命令直接在在 /usr/lib/trafficcop/api/edge 等文件中 还可以自己加按钮加配置，按钮的id要和新的配置文件名一样就可以","categories":[],"tags":[{"name":"tc","slug":"tc","permalink":"http://blog.twhlyl.top/tags/tc/"},{"name":"openwrt","slug":"openwrt","permalink":"http://blog.twhlyl.top/tags/openwrt/"}]},{"title":"zsh中自定义命令提示符格式、内容","slug":"zsh自定义","date":"2019-02-01T07:45:00.000Z","updated":"2019-02-01T10:51:26.745Z","comments":true,"path":"2019/02/01/zsh自定义/","link":"","permalink":"http://blog.twhlyl.top/2019/02/01/zsh自定义/","excerpt":"","text":"修改 ~/.zshrc文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859添加：PROMPT = &quot;%n@%m &gt;&gt;&gt;&quot; #左提示符RPROMPT = &quot;%/&quot; #右提示符添加颜色：#导入 colorsautoload -U colors &amp;&amp; colors$fg[red] #颜色改变的开始位置$reset_color #颜色改变的结束位置我的~/.zshrc中 PROMPT设置：PROMPT=$&apos;%&#123;$fg[cyan]%&#125;%* %D%&#123;$reset_color%&#125;|%&#123;$fg[white]%&#125;%U%n%u@%U%m%u%&#123;$reset_color%&#125;|%&#123;$fg[yellow]%&#125;D:%B%~%b &gt;&gt;&gt; %&#123;$reset_color%&#125;\\n%# &apos;附上一些常用的预定义prompt参数：! 和%h一样%B 开始粗体模式%b 结束粗体模式%c 当前工作目录名称的最后部分%C 跟%c类似，但是使用长形式的目录名称%d 本周的当天%D 今天是当月中的第几天%h 当前命令的历史记录编号%l shell的当前控制终端%L 清除从提示符末尾到下一行的所有内容%m 机器的主机名称%M 机器的完全符合规范的域名%n 用户名%p 用精确格式（包括秒）显示的12小时制时间%P 用精确格式（包括秒）显示的24小时制时间%S 开始标准输出格式%s 结束标准输出格式%t 以12小时制格式显示时间%T 以24小时制格式显示时间%U 开始下划线模式%u 结束下划线模式%w 当前月的名称%W 当前月的序数%y 以2位格式表示的年%Y 以4位格式表示的年%% %字符%! 跟%h相同%@ 跟%t相同$# 扩展到&gt;供常规使用，如果用户正以root身份运行的话，就扩展到#%/ 当前工作目录的完整名称%- 以短格式表示的当前工作目录^C 跟C匹配的控制字符：例如^G代表Ctrl+G\\a 使tcsh在任何时候显示提示符时嘟嘟响\\e 终止的escape符0x1B\\f 终止的换页符\\n 在这个位置开始一个新行\\r 回车符\\t Tab制表符\\v 垂直制表符\\nnn 由八进制数字nnn所指定的字符","categories":[{"name":"linux","slug":"linux","permalink":"http://blog.twhlyl.top/categories/linux/"}],"tags":[{"name":"zsh","slug":"zsh","permalink":"http://blog.twhlyl.top/tags/zsh/"}]},{"title":"ui automonkey（ios）","slug":"ui_automonkey","date":"2019-02-01T07:11:00.000Z","updated":"2019-02-01T10:51:26.745Z","comments":true,"path":"2019/02/01/ui_automonkey/","link":"","permalink":"http://blog.twhlyl.top/2019/02/01/ui_automonkey/","excerpt":"","text":"git hub 地址：https://github.com/jonathanpenn/ui-auto-monkey 简单步骤：使用ios Instruments中的UIAutomation，然后将已编写好的脚本（UIAutoMonkey.js）导入并运行 config可自行配置 uiautomation中元素访问及操作方法：https://github.com/twheastasia/eastasia/blob/master/uiautomationScript/sample.js","categories":[{"name":"自动化","slug":"自动化","permalink":"http://blog.twhlyl.top/categories/自动化/"}],"tags":[{"name":"ios","slug":"ios","permalink":"http://blog.twhlyl.top/tags/ios/"},{"name":"ui automation","slug":"ui-automation","permalink":"http://blog.twhlyl.top/tags/ui-automation/"},{"name":"automation","slug":"automation","permalink":"http://blog.twhlyl.top/tags/automation/"}]}]}